# Run-Time Environment: 	R version 4.0.3 & R Studio 1.4.1106
# Authors:				        Floor Hiemstra & Laura Kervezee
# Date created:           August 2023
# Project:      			    24-hour glucose variation in ICU patients
# Filename:               mimic-iv-24h-glucose-variation_01_preprocessing
# Purpose:  			        Extraction and preprocessing for the time-stamped dataframe including:
#                         - Glucose data and info
#                         - Nutrition data
#                         - Patient & ICU stay info
#                         - Dextrose, insulin, glucocorticoids administration
#                         - RASS scores
#                         - Ventilation mode
# Datafiles used:			    MIMIC-IV SQL database
########################################################################################################################
##### Packages -----
library(RPostgreSQL)
library(tidyverse)
library(stringr)
library(lubridate)
library(dplyr)
########################################################################################################################
##### STEP 1: Connect with SQL database -----
mimic_icu <- dbConnect(RPostgres::Postgres(),
host     = "localhost",
dbname   = "mimic",
user     = "postgres",
password = "postgres",
bigint   = "integer",
port="5432",
options  = "-c search_path=mimiciv_icu")
########################################################################################################################
##### Packages -----
library(RPostgreSQL)
# Run-Time Environment: 	R version 4.0.3 & R Studio 1.4.1106
# Authors:				        Floor Hiemstra & Laura Kervezee
# Date created:           August 2023
# Project:      			    24-hour glucose variation in ICU patients
# Filename:               mimic-iv-24h-glucose-variation_01_preprocessing
# Purpose:  			        Extraction and preprocessing for the time-stamped dataframe including:
#                         - Glucose data and info
#                         - Nutrition data
#                         - Patient & ICU stay info
#                         - Dextrose, insulin, glucocorticoids administration
#                         - RASS scores
#                         - Ventilation mode
# Datafiles used:			    MIMIC-IV SQL database
########################################################################################################################
##### Packages -----
library(RPostgreSQL)
library(tidyverse)
library(stringr)
library(lubridate)
library(dplyr)
########################################################################################################################
##### STEP 1: Connect with SQL database -----
mimic_icu <- dbConnect(RPostgres::Postgres(),
host     = "localhost",
dbname   = "mimic",
user     = "postgres",
password = "postgres",
bigint   = "integer",
port="5432",
options  = "-c search_path=mimiciv_icu")
mimic_hosp <- dbConnect(RPostgres::Postgres(),
host     = "localhost",
dbname   = "mimic",
user     = "postgres",
password = "postgres",
bigint   = "integer",
port="5432",
options  = "-c search_path=mimiciv_hosp")
mimic_derived <- dbConnect(RPostgres::Postgres(),
host     = "localhost",
dbname   = "mimic",
user     = "postgres",
password = "postgres",
bigint   = "integer",
port="5432",
options  = "-c search_path=mimiciv_derived")
########################################################################################################################
##### STEP 2: Subject selection -----
## Extract all ICUstays and all patient info
df_icustays_all <- tbl(mimic_icu, "icustays") %>% collect()
df_flowchart_subjects <- data.frame(total_icustays_all = nrow(df_icustays_all), # Store inclusion flowchart data
total_patients_all = length(unique(df_icustays_all$subject_id)))
## Exclude stays with length of stay (LOS) < 4 days
df_icustays_subject_selection <- df_icustays_all %>% filter(los >= 4) %>% collect()
df_flowchart_subjects$total_incl_icustays_los4 <- nrow(df_icustays_subject_selection)
df_flowchart_subjects$total_incl_patients_los4 <- length(unique(df_icustays_subject_selection$subject_id))
df_flowchart_subjects$total_excl_icustays_los4_from_all <- df_flowchart_subjects$total_icustays_all - df_flowchart_subjects$total_incl_icustays_los4
df_flowchart_subjects$total_excl_patients_los4_from_all <- df_flowchart_subjects$total_patients_all - df_flowchart_subjects$total_incl_patients_los4
## Exclude readmission stays
df_icustays_subject_selection <- df_icustays_subject_selection %>%  group_by(subject_id) %>% filter(intime == min(intime)) %>% ungroup()
df_flowchart_subjects$total_incl_icustays_los4_readm <- nrow(df_icustays_subject_selection)
df_flowchart_subjects$total_incl_patients_los4_readm <- length(unique(df_icustays_subject_selection$subject_id))
df_flowchart_subjects$total_excl_icustays_los4_readm <- df_flowchart_subjects$total_incl_icustays_los4 - df_flowchart_subjects$total_incl_icustays_los4_readm
df_flowchart_subjects$total_excl_patients_los4_readm <- df_flowchart_subjects$total_incl_patients_los4 - df_flowchart_subjects$total_incl_patients_los4_readm
## Create arrays of included stayids en patientids
incl_stayids_subject_selection <- df_icustays_subject_selection$stay_id
incl_subjectids_subject_selection <- df_icustays_subject_selection$subject_id
## WRAP-UP:
# df_icustays_all: dataframe with all ICU stays
# df_icustays_subject_selection: dataframe with selected ICU stays
# incl_stayids_subject_selection: array with stay_ids of included ICU stays
# incl_subjectids_subject_selection: array with subject_ids of included ICU stays
########################################################################################################################
##### STEP 3: Extract nutrition data -----
## Collect itemids of nutrition events
dfItems <- tbl(mimic_icu, "d_items") %>% collect() #table with definition of itemids (e.g. types of nutrition)
dfitems_nut <-  dfItems %>% filter(grepl("nutrition", tolower(category)) | label == "PO Intake") %>% select(itemid, label, category)
itemid_nut <- dfitems_nut %>% pull(itemid)
## Obtain all feeding events in selected ICU stays from 'inputevents' table
df_nut_all <- tbl(mimic_icu, "inputevents") %>%
filter(stay_id %in% incl_stayids_subject_selection & itemid %in% itemid_nut & amount > 0) %>%  collect() %>%
# Add feeding label
left_join(dfitems_nut %>% select(itemid, category, label), by="itemid") %>%
# Combine information from same order (= e.g. enteral feeding + added beneprotein; sum their amounts)
group_by(stay_id, starttime, endtime, orderid, ordercategoryname, ordercategorydescription, patientweight) %>%
summarize(amount_combined = sum(amount),
label_combined = paste(label, collapse="_"),
itemid_combined = paste(itemid, collapse="_"),
category_combined = paste(unique(category), collapse="_")) %>%
# Add icustay information
left_join(df_icustays_subject_selection %>% select(stay_id, intime, outtime, first_careunit, last_careunit, los), by=c("stay_id")) %>%
# Starttime and endtime as seq time (time since midnight of first day), so time of day info is preserved
mutate(starttime_seq = as.numeric(difftime(starttime, min(as.Date(intime)), units="hours")),
endtime_seq = as.numeric(difftime(endtime, min(as.Date(intime)), units="hours")),
outtime_seq = as.numeric(difftime(outtime, min(as.Date(intime)), units="hours")),
intime_seq = as.numeric(difftime(intime, min(as.Date(intime)), units="hours"))) %>%
# Add index to indicate if feeding periods are adjacent
ungroup() %>% group_by(stay_id) %>% arrange(stay_id, starttime_seq) %>%
mutate(nut_intervalnr = c(0, cumsum(lead(starttime_seq) > cummax(endtime_seq))[-n()]))
## Create groups of feeding types
df_nut_all <- df_nut_all%>% group_by(stay_id) %>%
mutate(nutritiongroup = case_when(all(category_combined  %in% c("Fluids/Intake", "Nutrition - Supplements")) ~ "Oral intake only",
all(category_combined  %in% c("Nutrition - Enteral", "Nutrition - Supplements")) ~ "Enteral feeding only",
all(category_combined  %in% c("Nutrition - Parenteral", "Nutrition - Supplements")) ~ "Parenteral feeding only",
!(all(category_combined  %in% c("Nutrition - Enteral", "Nutrition - Supplements")) | all(category_combined  %in% c("Nutrition - Parenteral", "Nutrition - Supplements")) | all(ordercategoryname %in% c("Fluids/Intake", "Nutrition - Supplements"))) ~ "Combined"))
## Select patients that receive enteral nutrition only or that received enteral nutrition during their stay (i.e. before or after oral intake)
df_nut_enteral <- df_nut_all %>% filter(nutritiongroup %in% c("Combined", "Enteral feeding only")) %>%
arrange(stay_id, starttime_seq) %>%
group_by(stay_id, nut_intervalnr) %>%
filter(all(category_combined %in% c("Nutrition - Enteral","Nutrition - Supplements")))
## Rename enteral nutrition
df_nut_enteral <- df_nut_enteral %>% rename(starttime_nut = starttime, endtime_nut=endtime, starttime_nut_seq = starttime_seq, endtime_nut_seq=endtime_seq,
amount_nut = amount_combined, label_nut=label_combined)
## Create arrays of included stayids
incl_stayids_nut <- unique(df_nut_enteral$stay_id)
## Add nutrition selection to inclusion flowchart dataframe
df_flowchart_subjects$total_incl_icustays_entfeed_frompatientselection <- length(incl_stayids_nut)
df_flowchart_subjects$total_excl_icustays_noentfeed_frompatientselection <- nrow(df_icustays_subject_selection) - df_flowchart_subjects$total_incl_icustays_entfeed_frompatientselection
# WRAP-UP:
# df_nut_all: dataframe with all feeding episodes of included icustays (incl_stayids_subject_selection)
# df_nut_enteral: dataframe with all enteral feeding episodes of included icustays (incl_stayids_subject_selection)
# incl_stayids_nut: array with stay_ids of included subjects (incl_stayids_subject_selection) who received enteral nutrition during their ICU stay
########################################################################################################################
##### STEP 4: Extract glucose data -----
## Glucose itemids from chartevents table (both lab and fingerstick is used:
#225664, -- Glucose finger stick
#220621, -- Glucose (serum)
#226537, -- Glucose (whole blood)
## Extract all glucose events from patients in df_icustay_selection
df_gluc_all <- tbl(mimic_icu, "chartevents") %>%
filter(itemid %in% c(225664,220621,226537) & stay_id %in% incl_stayids_subject_selection) %>% collect() %>%
# Add patient information
left_join(df_icustays_subject_selection %>% select(stay_id, intime, outtime, los), by=c("stay_id")) %>%
# Only include values taken during icu stay
filter(charttime >= intime & charttime <= outtime) %>%
# From Robles Arevalo et al (2021): "Sometimes the STORETIME (time listed by nurses for checking glucose) was recorded
# before the CHARTTIME (the time when the actual data entry occurred). In that case, the STORETIME timestamp
# was considered to be the time when the glycemic check occurred. Otherwise, the CHARTTIME timestamp was
# maintained as the time of glycemic check." The same strategy is followed here.
mutate(charttime = case_when(storetime < charttime ~ storetime,
storetime >= charttime ~ charttime))
## Add number of ICU stays without glucose measurment to df_flowchart_subjects
df_flowchart_subjects$total_incl_icustays_glucm_frompatientselection <- length(unique(df_gluc_all$stay_id))
df_flowchart_subjects$total_excl_icustays_noglucm_frompatientselection <- nrow(df_icustays_subject_selection) - df_flowchart_subjects$total_incl_icustays_glucm_frompatientselection
## Select glucose measurements from final included ICU stays (selected subjects that receive EN)
df_gluc_included_icustays <- df_gluc_all %>% filter(stay_id %in% incl_stayids_nut)
## Add to subject flowchart
df_flowchart_subjects$total_final_included_icustays <- length(unique(df_gluc_included_icustays$stay_id))
## Create df_flowchart_glucose with included glucose measurements from included patients
df_flowchart_glucose_m <- data.frame(total_glucose_m = nrow(df_gluc_included_icustays),
total_glucose_m_patients = nrow(df_gluc_included_icustays %>% distinct(stay_id)))
## Remove in duplicate and valid duplicate glucose measurements
df_gluc_valid <- df_gluc_included_icustays %>%
# Remove duplicate rows; keeping serum > whole blood > fingerstick if there's a duplicated chart and lab value (i.e. max. itemid)
group_by(subject_id, stay_id, charttime) %>%
mutate(item_preferred = case_when(itemid == 225664 ~ 3, #fingerstick is least preferred (more variable than other methods)
itemid == 226537 ~ 2,
itemid == 220621 ~ 1)) %>%
filter(item_preferred == min(item_preferred)) %>%
distinct(charttime, .keep_all=T) %>%
select(-item_preferred) %>% ungroup() %>%
# Remove invalid measurements; >1000 mg/dL for serum&blood, <500 mg/dL for fingerstick
filter((valuenum <= 1000 & itemid %in% c(220621,226537)) | (valuenum <= 500 & itemid == 225664))
## Count duplicates for flowchart
df_non_dupl <- df_gluc_included_icustays %>%
# Remove duplicate rows; keeping serum > whole blood > fingerstick if there's a duplicated chart and lab value (i.e. max. itemid)
group_by(subject_id, stay_id, charttime) %>%
mutate(item_preferred = case_when(itemid == 225664 ~ 3, #fingerstick is least preferred (more variable than other methods)
itemid == 226537 ~ 2,
itemid == 220621 ~ 1)) %>%
filter(item_preferred == min(item_preferred)) %>%
distinct(charttime, .keep_all=T) %>%
select(-item_preferred) %>% ungroup()
df_flowchart_glucose_m$total_duplicates_glucose_m <- nrow(df_gluc_included_icustays) - nrow(df_non_dupl)
## Count invalids for flowchart
df_flowchart_glucose_m$total_invalid_glucose_m <- nrow(df_gluc_included_icustays %>% filter(valuenum > 1000 & itemid %in% c(220621,226537))) + nrow(df_gluc_included_icustays %>% filter(valuenum > 500 & itemid == 225664))
## Total non-duplicate & valid glucose measurements
df_flowchart_glucose_m$total_valid_glucose_m <- nrow(df_gluc_valid)
df_flowchart_glucose_m$total_valid_glucose_m_icustays <- length(unique(df_gluc_valid$stay_id))
## Add new variables
df_gluc_valid <- df_gluc_valid %>% group_by(stay_id) %>%
## Add time variables
mutate(time_dec = as.numeric(local_time(charttime, tz="UTC", units="hours")),
time_hbin = floor(time_dec),
time_seq = as.numeric(difftime(charttime, as.Date(min(intime)), units="hours")),
time_icudays = time_seq %/% 24) %>%
ungroup()
df_gluc_valid <- df_gluc_valid %>% group_by(subject_id, stay_id) %>%
## Sort by time_seq to ensure correct calculation of time to next measurement
arrange((time_seq), .by_group = TRUE) %>%
## Add time since last measurement variable
mutate(time_last_measurement = time_seq - lag(time_seq, 1),
time_next_measurement = lead(time_seq, 1) - time_seq) %>%
ungroup() %>%
## Add sample type names
group_by(stay_id, charttime) %>%
mutate(sample_type = case_when(itemid == 225664 ~ 'Fingerstick',
itemid == 226537 ~ 'Lab (serum)',
itemid == 220621 ~ 'Lab (whole blood)')) %>%
ungroup()
## WRAP-UP:
# df_gluc_all: glucose values of all included icustays in df_icustays_subject_selection (with and without EN)
# df_gluc_included_icustays: glucose values of all included icustays in df_icustays_subject_selection with EN
# df_gluc_valid: Valid and non-duplicated glucose measurements of included icustays with EN with time variables)
########################################################################################################################
##### STEP 5: Link glucose & nutrition dataframe and extract glucose measurements taken DURING enteral feeding -----
## Link nutrition data to glucose data
df_gluc_nutinfo <- df_gluc_valid %>%
left_join(df_nut_enteral %>% select(stay_id, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut,nut_intervalnr),
by=c("stay_id"), type = "many-to-many") %>%
filter(time_seq > starttime_nut_seq & time_seq <= endtime_nut_seq) %>%
select(stay_id, time_seq, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr)
## Link nutrition data to glucose data
df_gluc_nutinfo <- df_gluc_valid %>%
left_join(df_nut_enteral %>% select(stay_id, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut,nut_intervalnr),
by=c("stay_id"), type = "many-to-many") %>%
filter(time_seq > starttime_nut_seq & time_seq <= endtime_nut_seq) %>%
select(stay_id, time_seq, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr)
df_gluc_nutinfo
df_gluc_valid
df_nut_enteral
## Link nutrition data to glucose data
df_gluc_nutinfo <- df_gluc_valid %>%
left_join(df_nut_enteral %>% select(stay_id, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut,nut_intervalnr),
by=c("stay_id"), type = "many-to-many") %>%
filter(time_seq > starttime_nut_seq & time_seq <= endtime_nut_seq) %>%
select(stay_id, time_seq, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr)
## Link nutrition data to glucose data
df_gluc_nutinfo <- df_gluc_valid %>%
left_join(df_nut_enteral %>% select(stay_id, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut,nut_intervalnr),
by=c("stay_id")) %>%
filter(time_seq > starttime_nut_seq & time_seq <= endtime_nut_seq) %>%
select(stay_id, time_seq, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr)
## Link nutrition data to glucose data
df_gluc_nutinfo <- df_gluc_valid %>%
left_join(df_nut_enteral %>% select(stay_id, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut,nut_intervalnr),
by=c("stay_id"), relationship = "many-to-many") %>%
filter(time_seq > starttime_nut_seq & time_seq <= endtime_nut_seq) %>%
select(stay_id, time_seq, starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr)
## Add enteral nutrition info to glucose data frame and only include glucose values taken during enteral feeding
df_gluc_nut <- df_gluc_valid %>% left_join(df_gluc_nutinfo, by=c("stay_id","time_seq")) %>%
arrange(stay_id, time_seq) %>%
# Remove duplicated measurements generated because feeding intervals occasionally overlap
group_by(hadm_id, time_seq) %>%
distinct(valuenum, .keep_all = T) %>%
# Add enteral vs no enteral feeding label and rate of nutrition
mutate(entfeeding_yn = ifelse(is.na(starttime_nut_seq), "n", "y"),
rate_nut = amount_nut/(endtime_nut_seq - starttime_nut_seq)) %>%
# Only include glucose values during enteral feeding
filter(entfeeding_yn == "y") %>%
# Add nutrition rate category
mutate(rate_nut_cat = case_when(rate_nut > 50 ~ '>50 mL/h',
rate_nut <= 50 ~ '=< 50 mL/h'))
View(df_gluc_nut)
View(df_nut_enteral)
df_gluc_nut_variables
## Extract ids of current selection
incl_stayid_gluc_selection <- unique(df_gluc_nut$stay_id)
incl_subjectid_gluc_selection <- unique(df_gluc_nut$subject_id)
incl_hadmid_gluc_selection <- unique(df_gluc_nut$hadm_id)
## Create dataframe including all data needed for analysis and rename columns
df_gluc_nut_variables <- df_gluc_nut %>% select(subject_id, hadm_id, stay_id, glucose_value=valuenum, glucose_unit=valueuom, charttime, storetime, time_seq, time_dec, time_hbin,
glucose_itemid=itemid, sample_type, intime, outtime, los, time_icudays, time_last_measurement, time_next_measurement,
starttime_nut_seq, endtime_nut_seq, amount_nut, label_nut, nut_intervalnr, rate_nut, rate_nut_cat)
## Convert glucose value to mmol/L
df_gluc_nut_variables <- df_gluc_nut_variables %>% mutate(glucose_value_mmolL = glucose_value/18.0182)
## Update glucose measurement flowchart
df_flowchart_glucose_m$len_noENduring_glucose_m <- nrow(df_gluc_valid) - nrow(df_gluc_nut_variables)
df_flowchart_glucose_m$len_yesENduring_glucose_m <- nrow(df_gluc_nut_variables)
df_flowchart_glucose_m$len_noENduring_glucose_m_patients <- length(incl_stayids_nut) - length(incl_stayid_gluc_selection)
df_flowchart_glucose_m$len_yesENduring_glucose_m_patients <- length(incl_stayid_gluc_selection)
df_gluc_nut_variables
########################################################################################################################
##### STEP 6: Export flowchart dataframes to csv and array of included subject_ids/hadm_ids/stay_ids -----
write_csv(df_flowchart_subjects, file=paste0("2-output/mimic-iv_24h-glucose-variation_01_flowchart-data-subject-inclusion.csv"))
## Extract patient info table
df_pat_info_gluc_selection <- tbl(mimic_hosp, "patients") %>% filter(subject_id %in% incl_subjectid_gluc_selection) %>% collect()
write_csv(df_flowchart_subjects, file=paste0("C:\Users\fwhiemstra\Documents\mimic-glucose\2-output/mimic-iv_24h-glucose-variation_01_flowchart-data-subject-inclusion.csv"))
